import { Schema } from '@fincity/kirun-js';
import { SCHEMA_REF_BOOL_COMP_PROP, SCHEMA_REF_STRING_COMP_PROP } from '../../constants';
import {
	ComponentPropertyDefinition,
	ComponentPropertyEditor,
	ComponentPropertyGroup,
	ComponentStylePropertyGroupDefinition,
} from '../../types/common';

const COMMON_COMPONENT_PROPERTIES: { [key: string]: ComponentPropertyDefinition } = {
	onClick: {
		name: 'onClick',
		schema: Schema.ofRef(SCHEMA_REF_STRING_COMP_PROP),
		displayName: 'On Click',
		editor: ComponentPropertyEditor.EVENT_SELECTOR,
		description: 'Event to be triggered when clicked.',
	},
	label: {
		name: 'label',
		schema: Schema.ofRef(SCHEMA_REF_STRING_COMP_PROP),
		displayName: 'Label',
		description: 'Label to be displayed',
		translatable: true,
		editor: ComponentPropertyEditor.TRANSLATABLE_PROP,
	},
	readOnly: {
		name: 'readOnly',
		schema: Schema.ofRef(SCHEMA_REF_BOOL_COMP_PROP),
		displayName: 'Read Only',
		description: 'This component will be rendered un editable when this property is true.',
		group: ComponentPropertyGroup.COMMON,
	},
	visibility: {
		name: 'visibility',
		schema: Schema.ofRef(SCHEMA_REF_BOOL_COMP_PROP),
		displayName: 'Visibility',
		description: 'This component will be hidden when this property is true.',
		group: ComponentPropertyGroup.COMMON,
	},
};

const COMPONENT_STYLE_GROUPS: { [key: string]: Array<string> } = {
	accentColor: ['accentColor'],
	backdropFilter: ['backdropFilter'],
	image: [
		'image-orientation',
		'image-rendering',
		'image-resolution',
		'object-fit',
		'object-position',
	],
	background: [
		'backgroundBlendMode',
		'backgroundClip',
		'backgroundColor',
		'backgroundImage',
		'backgroundOrigin',
		'backgroundPosition',
		'backgroundPositionX',
		'backgroundPositionY',
		'backgroundRepeat',
		'backgroundSize',
	],
	border: [
		'borderBottom',
		'borderBottomColor',
		'borderBottomLeftRadius',
		'borderBottomRightRadius',
		'borderBottomStyle',
		'borderBottomWidth',
		'borderCollapse',
		'borderColor',
		'borderEndEndRadius',
		'borderEndStartRadius',
		'borderImage',
		'borderImageOutset',
		'borderImageRepeat',
		'borderImageSlice',
		'borderImageSource',
		'borderImageWidth',
		'borderLeft',
		'borderLeftColor',
		'borderLeftStyle',
		'borderLeftWidth',
		'borderRadius',
		'borderRight',
		'borderRightColor',
		'borderRightStyle',
		'borderRightWidth',
		'borderSpacing',
		'borderStartEndRadius',
		'borderStartStartRadius',
		'borderStyle',
		'borderTop',
		'borderTopColor',
		'borderTopLeftRadius',
		'borderTopRightRadius',
		'borderTopStyle',
		'borderTopWidth',
		'borderWidth',
	],
	boxShadow: ['boxShadow'],
	color: ['color'],
	container: ['overflow', 'overflowWrap', 'overflowX', 'overflowY'],
	flex: [
		'alignContent',
		'alignItems',
		'alignSelf',
		'justifyContent',
		'flex',
		'flexBasis',
		'flexDirection',
		'flexFlow',
		'flexGrow',
		'flexWrap',
		'gap',
	],
	font: [
		'direction',
		'fontFamily',
		'fontFeatureSettings',
		'fontKerning',
		'fontSize',
		'fontStyle',
		'fontVariant',
		'fontVariantCaps',
		'fontWeight',
		'letterSpacing',
		'lineHeight',
		'textAlign',
		'textAlignLast',
		'textDecoration',
		'textDecorationColor',
		'textDecorationLine',
		'textDecorationStyle',
		'textEmphasis',
		'textIndent',
		'textOrientation',
		'textOverflow',
		'textShadow',
		'textTransform',
		'whiteSpace',
		'wordBreak',
		'wordSpacing',
		'wordWrap',
	],
	margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop', 'margin'],
	opacity: ['opacity'],
	outline: ['outlineColor', 'outlineOffset', 'outlineStyle', 'outlineWidth'],
	padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', 'padding'],
	position: ['bottom', 'left', 'right', 'top', 'translateX', 'translateY', 'position'],
	rotate: ['rotate'],
	size: ['width', 'height', 'minHeight', 'minWidth', 'maxHeight', 'maxWidth', 'scale'],
	transform: ['transform', 'transformOrigin', 'transformStyle'],
	zIndex: ['zIndex'],
};

const CSS_STYLE_PROPERTY_GROUP_REF: { [key: string]: string } = Object.entries(
	COMPONENT_STYLE_GROUPS,
).reduce((a: any, [grp, mems]) => {
	for (const x of mems) a[x] = grp;
	return a;
}, {});

const COMPONENT_STYLE_GROUP_PROPERTIES: { [key: string]: ComponentStylePropertyGroupDefinition } = {
	image: {
		name: 'image',
		type: 'image',
		displayName: 'Image Properties',
		description: 'Image Properties',
		target: ['comp'],
	},
	accentColor: {
		name: 'accentColor',
		type: 'accentColor',
		displayName: 'Accent Color',
		description: 'Accent Color',
		target: ['comp'],
	},
	backdropFilter: {
		name: 'backdropFilter',
		type: 'backdropFilter',
		displayName: 'Backdrop Filter',
		description: 'Backdrop Filter',
		target: ['comp'],
	},
	background: {
		name: 'background',
		type: 'background',
		displayName: 'Background',
		description: 'Background',
		target: ['comp'],
	},
	border: {
		name: 'border',
		type: 'border',
		displayName: 'Border',
		description: 'Border',
		target: ['comp'],
	},
	boxShadow: {
		name: 'boxShadow',
		type: 'boxShadow',
		displayName: 'Box Shadow',
		description: 'Box Shadow',
		target: ['comp'],
	},
	color: {
		name: 'color',
		type: 'color',
		displayName: 'Color',
		description: 'Color',
		target: ['comp'],
	},
	container: {
		name: 'container',
		type: 'container',
		displayName: 'Container',
		description: 'Container',
		target: ['comp'],
	},
	flex: {
		name: 'flex',
		type: 'flex',
		displayName: 'Flex',
		description: 'Flex',
		target: ['comp'],
	},
	font: {
		name: 'font',
		type: 'font',
		displayName: 'Font',
		description: 'Font',
		target: ['comp'],
	},
	margin: {
		name: 'margin',
		type: 'margin',
		displayName: 'Margin',
		description: 'Margin',
		target: ['comp'],
	},
	opacity: {
		name: 'opacity',
		type: 'opacity',
		displayName: 'Opacity',
		description: 'Opacity',
		target: ['comp'],
	},
	outline: {
		name: 'outline',
		type: 'outline',
		displayName: 'Outline',
		description: 'Outline',
		target: ['comp'],
	},
	padding: {
		name: 'padding',
		type: 'padding',
		displayName: 'Padding',
		description: 'Padding',
		target: ['comp'],
	},
	position: {
		name: 'position',
		type: 'position',
		displayName: 'Position',
		description: 'Position',
		target: ['comp'],
	},
	rotate: {
		name: 'rotate',
		type: 'rotate',
		displayName: 'Rotate',
		description: 'Rotate',
		target: ['comp'],
	},
	size: {
		name: 'size',
		type: 'size',
		displayName: 'Size',
		description: 'Size',
		target: ['comp'],
	},
	transform: {
		name: 'transform',
		type: 'transform',
		displayName: 'Transform',
		description: 'Transform',
		target: ['comp'],
	},
	zIndex: {
		name: 'zIndex',
		type: 'zIndex',
		displayName: 'Z Index',
		description: 'Z Index',
		target: ['comp'],
	},
};

export {
	COMMON_COMPONENT_PROPERTIES,
	COMPONENT_STYLE_GROUP_PROPERTIES,
	CSS_STYLE_PROPERTY_GROUP_REF,
};
