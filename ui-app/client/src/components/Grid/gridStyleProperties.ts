import { StyleGroupDefinition, StylePropertyDefinition } from '../../types/common';

export const styleProperties: Array<StylePropertyDefinition> = [
	{
		name: 'gridPaddingLeft',
		cssProperty: 'padding-left',
		displayName: 'Grid Left padding',
		description: 'Left padding for grid.',
		selector: '.comp.compGrid._noAnchorGrid',
	},
	{
		name: 'gridPaddingRight',
		cssProperty: 'padding-right',
		displayName: 'Grid Right padding',
		description: 'Right padding for grid.',
		selector: '.comp.compGrid._noAnchorGrid',
	},
	{
		name: 'gridPaddingTop',
		cssProperty: 'padding-top',
		displayName: 'Grid Top padding',
		description: 'Top padding for grid.',
		selector: '.comp.compGrid._noAnchorGrid',
	},
	{
		name: 'gridPaddingBottom',
		cssProperty: 'padding-bottom',
		displayName: 'Grid Bottom padding',
		description: 'Bottom padding for grid.',
		selector: '.comp.compGrid._noAnchorGrid',
	},
	{
		name: 'anchoredGridPaddingLeft',
		cssProperty: 'padding-left',
		displayName: 'Grid Left padding',
		description: 'Left padding for grid.',
		selector: '.comp.compGrid ._anchorGrid',
	},
	{
		name: 'anchoredGridPaddingRight',
		cssProperty: 'padding-right',
		displayName: 'Grid Right padding',
		description: 'Right padding for grid.',
		selector: '.comp.compGrid ._anchorGrid',
	},
	{
		name: 'anchoredGridPaddingTop',
		cssProperty: 'padding-top',
		displayName: 'Grid Top padding',
		description: 'Top padding for grid.',
		selector: '.comp.compGrid ._anchorGrid',
	},
	{
		name: 'anchoredGridPaddingBottom',
		cssProperty: 'padding-bottom',
		displayName: 'Grid Bottom padding',
		description: 'Bottom padding for grid.',
		selector: '.comp.compGrid ._anchorGrid',
	},
	{
		name: 'gapBetween',
		cssProperty: 'gap',
		displayName: 'Gap between children',
		description: 'Gap between children of grid.',
		defaultValue: '5px',
		selector: '.comp.compGrid ._anchorGrid, .comp.compGrid._noAnchorGrid',
	},
	{
		groupName: 'Border',
		displayName: 'Border Light',
		name: 'borderLight',
		defaultValue: '1px solid',
		cssProperty: 'border',
		selector: '._LIGHT',
	},
	{
		groupName: 'Border',
		displayName: 'Border Medium',
		name: 'borderMedium',
		defaultValue: '3px solid',
		cssProperty: 'border',
		selector: '._MEDIUM',
	},
	{
		groupName: 'Border',
		displayName: 'Border High',
		name: 'borderHigh',
		defaultValue: '5px solid',
		cssProperty: 'border',
		selector: '._HEAVY',
	},

	{
		groupName: 'Border Radius',
		displayName: 'Border Radius Straight',
		name: 'borderRadiusStraight',
		defaultValue: '0px ',
		cssProperty: 'border-radius',
		selector: '._STRAIGHT',
	},
	{
		groupName: 'Border Radius',
		displayName: 'Border Radius Round',
		name: 'borderRadiusRound',
		defaultValue: '10px ',
		cssProperty: 'border-radius',
		selector: '._ROUND',
	},
	{
		groupName: 'Border Radius',
		displayName: 'Border Radius Very Round',
		name: 'borderRadiusVeryRound',
		defaultValue: '30px',
		cssProperty: 'border-radius',
		selector: '._VERYROUND',
	},

	{
		groupName: 'Box Shadow',
		displayName: 'Box Shadow DarkLow',
		name: 'boxShadowDarkLow',
		defaultValue: '0px 3px 10px 0px rgba(255, 255, 255, 0.10)',
		cssProperty: 'box-shadow',
		selector: '._DARKLOW',
	},
	{
		groupName: 'Box Shadow',
		displayName: 'Box Shadow DarkMedium',
		name: 'boxShadowDarkMedium',
		defaultValue: '0px 5px 20px 0px rgba(255, 255, 255, 0.20)',
		cssProperty: 'box-shadow',
		selector: '._DARKMEDIUM',
	},
	{
		groupName: 'Box Shadow',
		displayName: 'Box Shadow DarkHigh',
		name: 'boxShadowDarkHigh',
		defaultValue: '0px 5px 30px 0px rgba(255, 255, 255, 0.30)',
		cssProperty: 'box-shadow',
		selector: '._DARKHIGH',
	},
	{
		groupName: 'Box Shadow',
		displayName: 'Box Shadow LightLow',
		name: 'boxShadowLightLow',
		defaultValue: '0px 3px 10px 0px rgba(0, 0, 0, 0.10)',
		cssProperty: 'box-shadow',
		selector: '._LIGHTLOW',
	},
	{
		groupName: 'Box Shadow',
		displayName: 'Box Shadow LightMedium',
		name: 'boxShadowLightMedium',
		defaultValue: '0px 5px 20px 0px rgba(0, 0, 0, 0.20)',
		cssProperty: 'box-shadow',
		selector: '._LIGHTMEDIUM',
	},
	{
		groupName: 'Box Shadow',
		displayName: 'Box Shadow LightHigh',
		name: 'boxShadowLightHigh',
		defaultValue: '0px 5px 30px 0px rgba(0, 0, 0, 0.30)',
		cssProperty: 'box-shadow',
		selector: '._LIGHTHIGH',
	},
];

export const styleDefaults = new Map<string, string>(
	styleProperties
		.filter(e => !!e.defaultValue)
		.map(({ name, defaultValue }) => [name, defaultValue!]),
);
