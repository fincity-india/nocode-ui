import React, { useState } from 'react';

export const typeBasedComponent = [
	{
		label: 'Text box',
		key: 'textBox',
		icon: (
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="25"
				height="18"
				viewBox="0 0 25 18"
				fill="none"
			>
				<path
					d="M22.0238 0H2.97619C1.33521 0 0 1.32492 0 2.95455V15.0455C0 16.6751 1.33521 18 2.97619 18H22.0238C23.6648 18 25 16.6751 25 15.0455V2.95455C25 1.32492 23.6648 0 22.0238 0ZM23.8095 15.0455C23.8095 16.023 23.0085 16.8182 22.0238 16.8182H2.97619C1.99149 16.8182 1.19048 16.023 1.19048 15.0455V2.95455C1.19048 1.977 1.99149 1.18182 2.97619 1.18182H22.0238C23.0085 1.18182 23.8095 1.977 23.8095 2.95455V15.0455Z"
					fill="#43B2FF"
				/>
				<path
					d="M12 1H3C1.89543 1 1 1.89543 1 3V15C1 16.1046 1.89543 17 3 17H12V1Z"
					fill="#43B2FF"
					fillOpacity="0.15"
				/>
				<path
					d="M18.6478 8.20312H5.40433C5.09365 8.20312 4.8418 8.45498 4.8418 8.76566V8.81596C4.8418 9.12664 5.09365 9.3785 5.40433 9.3785H18.6478C18.9585 9.3785 19.2104 9.12664 19.2104 8.81596V8.76566C19.2104 8.45498 18.9585 8.20312 18.6478 8.20312Z"
					fill="#43B2FF"
				/>
			</svg>
		),
	},
	{
		label: 'Text area',
		key: 'textArea',
		icon: (
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="25"
				height="18"
				viewBox="0 0 25 18"
				fill="none"
			>
				<path
					d="M22.0238 0H2.97619C1.33521 0 0 1.32492 0 2.95455V15.0455C0 16.6751 1.33521 18 2.97619 18H22.0238C23.6648 18 25 16.6751 25 15.0455V2.95455C25 1.32492 23.6648 0 22.0238 0ZM23.8095 15.0455C23.8095 16.023 23.0085 16.8182 22.0238 16.8182H2.97619C1.99149 16.8182 1.19048 16.023 1.19048 15.0455V2.95455C1.19048 1.977 1.99149 1.18182 2.97619 1.18182H22.0238C23.0085 1.18182 23.8095 1.977 23.8095 2.95455V15.0455Z"
					fill="#1CBA79"
				/>
				<path
					d="M12 1H3C1.89543 1 1 1.89543 1 3V15C1 16.1046 1.89543 17 3 17H12V1Z"
					fill="#1CBA79"
					fillOpacity="0.15"
				/>
				<path
					d="M13.2163 5.52344H6.35203C6.07023 5.52344 5.8418 5.75188 5.8418 6.03367V6.18858C5.8418 6.47037 6.07023 6.69881 6.35203 6.69881H13.2163C13.4981 6.69881 13.7265 6.47037 13.7265 6.18858V6.03367C13.7265 5.75188 13.4981 5.52344 13.2163 5.52344Z"
					fill="#1CBA79"
				/>
				<path
					d="M18.6478 8.20312H6.40433C6.09365 8.20312 5.8418 8.45498 5.8418 8.76566V8.81596C5.8418 9.12664 6.09365 9.3785 6.40433 9.3785H18.6478C18.9585 9.3785 19.2104 9.12664 19.2104 8.81596V8.76566C19.2104 8.45498 18.9585 8.20312 18.6478 8.20312Z"
					fill="#1CBA79"
				/>
				<path
					d="M14.6478 10.875H6.40433C6.09365 10.875 5.8418 11.1269 5.8418 11.4375V11.4878C5.8418 11.7985 6.09365 12.0504 6.40433 12.0504H14.6478C14.9585 12.0504 15.2104 11.7985 15.2104 11.4878V11.4375C15.2104 11.1269 14.9585 10.875 14.6478 10.875Z"
					fill="#1CBA79"
				/>
			</svg>
		),
	},
	{
		label: 'Name',
		key: 'name',
		icon: (
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="23"
				height="16"
				viewBox="0 0 23 16"
				fill="none"
			>
				<rect
					x="0.4"
					y="0.4"
					width="22.2"
					height="14.7806"
					rx="1.6"
					fill="#FFC200"
					fillOpacity="0.15"
					stroke="#FFC200"
					strokeWidth="0.8"
				/>
				<rect x="14" y="5" width="5" height="6" fill="white" />
				<path
					d="M19.2163 4.52344H13.352C13.0702 4.52344 12.8418 4.75188 12.8418 5.03367V5.18858C12.8418 5.47037 13.0702 5.69881 13.352 5.69881H19.2163C19.4981 5.69881 19.7265 5.47037 19.7265 5.18858V5.03367C19.7265 4.75188 19.4981 4.52344 19.2163 4.52344Z"
					fill="#FFC200"
				/>
				<path
					d="M20.6478 7.20312H13.4043C13.0937 7.20312 12.8418 7.45498 12.8418 7.76566V7.81596C12.8418 8.12664 13.0937 8.3785 13.4043 8.3785H20.6478C20.9585 8.3785 21.2104 8.12664 21.2104 7.81596V7.76566C21.2104 7.45498 20.9585 7.20312 20.6478 7.20312Z"
					fill="#FFC200"
				/>
				<path
					d="M20.6478 9.875H13.4043C13.0937 9.875 12.8418 10.1269 12.8418 10.4375V10.4878C12.8418 10.7985 13.0937 11.0504 13.4043 11.0504H20.6478C20.9585 11.0504 21.2104 10.7985 21.2104 10.4878V10.4375C21.2104 10.1269 20.9585 9.875 20.6478 9.875Z"
					fill="#FFC200"
				/>
				<circle cx="6.5" cy="6" r="2" fill="white" />
				<path
					d="M10.4614 10.1531C10.2566 9.67163 9.96202 9.2335 9.59335 8.86218C9.25004 8.51893 8.84798 8.24 8.40625 8.03863C8.43704 8.01526 8.46449 7.9878 8.48786 7.95702C8.74168 7.70548 8.94317 7.40617 9.0807 7.07635C9.21823 6.74654 9.28908 6.39275 9.28915 6.0354C9.28915 5.31324 9.00228 4.62066 8.49163 4.11002C7.98099 3.59938 7.28841 3.3125 6.56625 3.3125C5.84409 3.3125 5.15151 3.59938 4.64087 4.11002C4.13022 4.62066 3.84335 5.31324 3.84335 6.0354C3.84206 6.39228 3.91156 6.74588 4.04783 7.07572C4.1841 7.40556 4.38442 7.7051 4.63722 7.95702C4.69597 8.02211 4.76054 8.08171 4.83012 8.13508C4.00132 8.57853 3.34742 9.28997 2.97528 10.1531C2.76515 10.6535 2.6567 11.1907 2.65625 11.7335C2.65625 11.8781 2.7137 12.0168 2.81597 12.1191C2.91824 12.2213 3.05694 12.2788 3.20157 12.2788C3.3462 12.2788 3.48491 12.2213 3.58717 12.1191C3.68944 12.0168 3.7469 11.8781 3.7469 11.7335C3.7469 10.9444 4.06035 10.1877 4.6183 9.62971C5.17625 9.07176 5.933 8.75831 6.72206 8.75831C7.51112 8.75831 8.26786 9.07176 8.82581 9.62971C9.38376 10.1877 9.69722 10.9444 9.69722 11.7335C9.69722 11.8771 9.75428 12.0149 9.85585 12.1164C9.95742 12.218 10.0952 12.2751 10.2388 12.2751C10.3825 12.2751 10.5202 12.218 10.6218 12.1164C10.7234 12.0149 10.7804 11.8771 10.7804 11.7335C10.78 11.1907 10.6715 10.6535 10.4614 10.1531ZM6.56625 7.67508C6.24196 7.67654 5.92451 7.58181 5.65406 7.40286C5.38361 7.22391 5.17229 6.96878 5.04683 6.66974C4.92138 6.37069 4.88742 6.04116 4.94925 5.72281C5.01107 5.40446 5.16591 5.1116 5.39419 4.88125C5.62246 4.6509 5.91391 4.49342 6.23168 4.42871C6.54946 4.36401 6.87929 4.39498 7.17946 4.51773C7.47963 4.64047 7.73666 4.84947 7.91805 5.11829C8.09944 5.38712 8.19704 5.70369 8.19851 6.02798V6.0354C8.19838 6.46895 8.0266 6.88481 7.72073 7.19206C7.41487 7.49932 6.99979 7.67298 6.56625 7.67508Z"
					fill="#FFC200"
				/>
			</svg>
		),
	},
	{
		label: 'Phone',
		key: 'phone',
		icon: (
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="18"
				height="18"
				viewBox="0 0 18 18"
				fill="none"
			>
				<path
					d="M5.5 1.99999C4.51795 2.00292 3.60622 0.330292 3 0.49591L1.92183 1.79393C1.37811 1.94392 0.5 3.93703 0.5 4.49951C0.5 7.93482 2.50819 10.3926 4.67171 12.4997C6.66108 14.4372 8.87629 15.9587 11.5 16.6283C12.4443 16.8693 13 17.5 14 17C14.6325 16.6838 15.35 16.0437 15.5 15.5L17 14C16.5445 13.6722 16 13 15.5 12L13.5 10.5C12.9906 10.2875 12.3469 11.0719 12 11.5L10.5215 12.4997C8.32155 11.4591 6.04058 9.19989 5 6.99999L6 5.49999C6.42811 5.15 7.25285 4.50934 7.04036 3.99999L6 2.49999L5.5 1.99999Z"
					fill="#427EE4"
					fillOpacity="0.15"
				/>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M4.12432 0.340342C3.90672 0.12274 3.61129 0 3.30309 0C2.99488 0 2.69946 0.12274 2.48185 0.340342C2.07801 0.744182 1.51503 1.30716 1.02098 1.80121C0.176514 2.64568 -0.176991 3.86378 0.08475 5.02884C0.0851372 5.03039 0.0855326 5.03232 0.0859198 5.03387C0.5188 6.85135 1.63933 9.79168 4.57811 12.7305C7.51689 15.6692 10.458 16.7898 12.2762 17.2199C12.2774 17.2203 12.279 17.2203 12.2805 17.2207C13.4444 17.4821 14.6617 17.1293 15.5054 16.2857C16.0006 15.7943 16.564 15.2309 16.9682 14.8267C17.1862 14.6091 17.3086 14.3137 17.3086 14.0055C17.3086 13.6973 17.1858 13.4019 16.9682 13.1842C16.2314 12.4474 14.9281 11.1441 14.1913 10.4073C13.9737 10.1897 13.6783 10.067 13.3701 10.067C13.0619 10.067 12.7664 10.1893 12.5488 10.4073L11.0566 11.8995C10.9745 11.9816 10.8603 12.0223 10.7457 12.0114C10.1478 11.8368 8.92278 11.3339 7.44875 9.85983C6.02233 8.43341 5.50195 7.41278 5.31997 6.90323C5.3072 6.79714 5.33894 6.6926 5.40747 6.61245C5.40902 6.6109 5.41057 6.60897 5.41212 6.60703C5.78653 6.15324 6.52064 5.29678 7.00231 4.73496C7.39724 4.2742 7.37092 3.58694 6.94192 3.15755L4.12432 0.340342ZM3.57683 0.887829L6.39404 3.70503C6.5373 3.84829 6.54582 4.07751 6.41417 4.23084C5.93057 4.79536 5.19297 5.65609 4.81585 6.11298C4.59167 6.37665 4.49835 6.72784 4.56185 7.06818C4.56533 7.08676 4.57037 7.10535 4.57656 7.12316C4.76396 7.66871 5.30642 8.81286 6.90126 10.4073C8.54411 12.0506 9.91516 12.5802 10.5583 12.7638C10.5738 12.768 10.5896 12.7715 10.6055 12.7738C10.9714 12.8304 11.3423 12.7088 11.6041 12.447L13.0963 10.9548C13.1687 10.8824 13.2675 10.8414 13.3701 10.8414C13.4727 10.8414 13.5714 10.8824 13.6438 10.9548L16.4207 13.7317C16.4931 13.8041 16.5342 13.9029 16.5342 14.0055C16.5342 14.1081 16.4931 14.2068 16.4207 14.2792C16.0169 14.6827 15.4547 15.2453 14.9591 15.737L14.9579 15.7382C14.302 16.3937 13.3565 16.6682 12.452 16.4657C10.7197 16.0557 7.92383 14.9812 5.1256 12.183C2.32737 9.38474 1.25291 6.58883 0.839778 4.85693C0.637277 3.95129 0.912178 3.00499 1.56847 2.3487L3.02934 0.887829C3.10175 0.815425 3.20048 0.774383 3.30309 0.774383C3.40569 0.774383 3.50443 0.815425 3.57683 0.887829Z"
					fill="#43B2FF"
				/>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M8.72313 2.0029C12.3561 2.0029 15.3054 4.95213 15.3054 8.58515C15.3054 8.79888 15.4788 8.97234 15.6926 8.97234C15.9063 8.97234 16.0798 8.79888 16.0798 8.58515C16.0798 4.52506 12.7832 1.22852 8.72313 1.22852C8.5094 1.22852 8.33594 1.40198 8.33594 1.61571C8.33594 1.82944 8.5094 2.0029 8.72313 2.0029Z"
					fill="#43B2FF"
				/>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M8.72313 4.32516C11.0738 4.32516 12.9822 6.23363 12.9822 8.58427C12.9822 8.798 13.1557 8.97146 13.3694 8.97146C13.5832 8.97146 13.7566 8.798 13.7566 8.58427C13.7566 5.80617 11.5012 3.55078 8.72313 3.55078C8.5094 3.55078 8.33594 3.72424 8.33594 3.93797C8.33594 4.1517 8.5094 4.32516 8.72313 4.32516Z"
					fill="#43B2FF"
				/>
				<path
					fillRule="evenodd"
					clipRule="evenodd"
					d="M8.72313 6.64938C9.79178 6.64938 10.6591 7.51669 10.6591 8.58534C10.6591 8.79907 10.8325 8.97253 11.0463 8.97253C11.26 8.97253 11.4335 8.79907 11.4335 8.58534C11.4335 7.08962 10.2188 5.875 8.72313 5.875C8.5094 5.875 8.33594 6.04846 8.33594 6.26219C8.33594 6.47592 8.5094 6.64938 8.72313 6.64938Z"
					fill="#43B2FF"
				/>
			</svg>
		),
	},

	{
		label: 'Email',
		key: 'email',
		icon: (
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="23"
				height="16"
				viewBox="0 0 23 16"
				fill="none"
			>
				<path
					d="M1 0.5H22L22.5 1.5L22 2.50206L13.5 8.00206L10.5 8.50206L1 2.50206L0.5 1.5L1 0.5Z"
					fill="#1CBA79"
					fillOpacity="0.15"
				/>
				<path
					d="M1 15.5H22V15.1252L21.5 14.2486L13.5 8L11.5 8.5L9.5 8L1.5 14.5L1 15V15.5Z"
					fill="#1CBA79"
					fillOpacity="0.15"
				/>
				<path
					d="M21.5381 0H1.46186C0.633475 0 0 0.654971 0 1.40351V14.5965C0 15.3918 0.682203 16 1.46186 16H21.5381C22.3665 16 23 15.345 23 14.5965V1.40351C23 0.608187 22.3665 0 21.5381 0ZM14.1801 7.81287L22.0254 2.94737V14.2222L14.1801 7.81287ZM1.46186 0.935673H21.5381C21.8305 0.935673 22.0254 1.16959 22.0254 1.40351V1.82456L12.2309 7.90643C11.7924 8.18713 11.2076 8.18713 10.7691 7.90643L0.974576 1.82456V1.40351C0.974576 1.12281 1.16949 0.935673 1.46186 0.935673ZM0.974576 14.3158V2.94737L8.81992 7.81287L0.974576 14.3158ZM1.51059 15.0643L9.64831 8.32749L10.2331 8.70176C10.6229 8.93567 11.0614 9.07602 11.5 9.07602C11.9386 9.07602 12.3771 8.93567 12.7669 8.70176L13.303 8.37427L21.5869 15.1111H21.5381H1.51059V15.0643Z"
					fill="#1CBA79"
				/>
			</svg>
		),
	},
];

export const optionBasedComponent = [
	{
		label: 'Drop down',
		key: 'dropdown',
		icon: (
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="25"
				height="13"
				viewBox="0 0 25 13"
				fill="none"
			>
				<path
					d="M13 1H22C23.1046 1 24 1.89543 24 3V10C24 11.1046 23.1046 12 22 12H13V1Z"
					fill="#FFC200"
					fillOpacity="0.15"
				/>
				<path
					d="M22.0238 0H2.97619C1.33521 0 0 1.32492 0 2.95455V10.0455C0 11.6751 1.33521 13 2.97619 13H22.0238C23.6648 13 25 11.6751 25 10.0455V2.95455C25 1.32492 23.6648 0 22.0238 0ZM23.8095 10.0455C23.8095 11.023 23.0085 11.8182 22.0238 11.8182H2.97619C1.99149 11.8182 1.19048 11.023 1.19048 10.0455V2.95455C1.19048 1.977 1.99149 1.18182 2.97619 1.18182H22.0238C23.0085 1.18182 23.8095 1.977 23.8095 2.95455V10.0455ZM20.0637 4.90038C20.2962 5.13121 20.2962 5.50515 20.0637 5.73597L17.6828 8.0996C17.5665 8.21502 17.4142 8.27272 17.2619 8.27272C17.1096 8.27272 16.9573 8.21501 16.841 8.0996L14.4601 5.73597C14.2276 5.50515 14.2276 5.13121 14.4601 4.90038C14.6926 4.66956 15.0693 4.66956 15.3018 4.90038L17.2619 6.84623L19.222 4.90038C19.4545 4.66956 19.8312 4.66956 20.0637 4.90038Z"
					fill="#FFC200"
				/>
			</svg>
		),
	},
	{
		label: 'Radio Button',
		key: 'radioButton',
		icon: (
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="17"
				height="17"
				viewBox="0 0 17 17"
				fill="none"
			>
				<circle cx="7.5" cy="9.5" r="6.5" fill="#A084E8" fillOpacity="0.15" />
				<path
					d="M8.5 0C3.81316 0 0 3.81297 0 8.5C0 13.187 3.81316 17 8.5 17C13.1868 17 17 13.187 17 8.5C17 3.81297 13.1868 0 8.5 0ZM8.5 16.0449C4.33978 16.0449 0.955056 12.6602 0.955056 8.5C0.955056 4.33978 4.33978 0.955056 8.5 0.955056C12.6602 0.955056 16.0449 4.33978 16.0449 8.5C16.0449 12.6602 12.6602 16.0449 8.5 16.0449Z"
					fill="#A084E8"
				/>
				<circle cx="8.5" cy="8.5" r="4.5" fill="#A084E8" />
			</svg>
		),
	},
	{
		label: 'Check box',
		key: 'checkBox',
		icon: (
			<svg
				xmlns="http://www.w3.org/2000/svg"
				width="17"
				height="17"
				viewBox="0 0 17 17"
				fill="none"
			>
				<path
					d="M14.3178 0H2.70111C1.20889 0 0 1.20889 0 2.70111V14.3178C0 15.7911 1.20889 17 2.70111 17H14.3178C15.7911 17 17 15.7911 17 14.3178V2.70111C17 1.20889 15.7911 0 14.3178 0ZM13.4489 6.78111L7.93333 12.2967C7.74444 12.4856 7.49889 12.58 7.27222 12.58C7.04556 12.58 6.78111 12.4856 6.61111 12.2967L3.55111 9.23667C3.17333 8.85889 3.17333 12.5233 3.55111 12.1456C3.92889 11.7678 4.51444 11.7678 4.89222 12.1456L7.29111 14.5444L14.875 5.84375C15.2528 5.46597 13.1089 5.06222 13.4867 5.44C13.8267 5.81778 13.8267 6.42222 13.4489 6.78111Z"
					fill="#1CBA79"
					fillOpacity="0.15"
				/>
				<path
					d="M12.9685 6.16936L7.99952 11.0814C7.84636 11.2497 7.60813 11.3338 7.40392 11.3338C7.19972 11.3338 6.9785 11.2497 6.80833 11.0814L4.03455 8.37307C3.69421 8.03662 3.69421 7.51514 4.03455 7.17869C4.37489 6.84225 4.90242 6.84225 5.24276 7.17869L7.40392 9.29829L11.7603 4.97499C12.1006 4.63855 12.6281 4.63855 12.9685 4.97499C13.3088 5.31143 13.3088 5.83292 12.9685 6.16936Z"
					fill="#1CBA79"
				/>
			</svg>
		),
	},
];

const icon = {
	angleUp: (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="11"
			height="6"
			viewBox="0 0 11 6"
			fill="none"
		>
			<path
				d="M4.72307 0.292854C5.15258 -0.0976181 5.8501 -0.0976181 6.27961 0.292854L10.6778 4.29129C10.9939 4.57868 11.0867 5.00664 10.9149 5.38149C10.7431 5.75635 10.3445 6 9.89779 6L1.10145 5.99688C0.658202 5.99688 0.256182 5.75322 0.0843785 5.37837C-0.0874249 5.00351 0.00878498 4.57556 0.321467 4.28817L4.71963 0.289731L4.72307 0.292854Z"
				fill="black"
				fillOpacity="0.2"
			/>
		</svg>
	),

	angleDown: (
		<svg
			xmlns="http://www.w3.org/2000/svg"
			width="11"
			height="6"
			viewBox="0 0 11 6"
			fill="none"
		>
			<path
				d="M4.72307 5.70715C5.15258 6.09762 5.8501 6.09762 6.27961 5.70715L10.6778 1.70871C10.9939 1.42132 11.0867 0.993362 10.9149 0.618508C10.7431 0.243655 10.3445 0 9.89779 0L1.10145 0.00312397C0.658202 0.00312397 0.256182 0.246779 0.0843785 0.621632C-0.0874249 0.996486 0.00878498 1.42444 0.321467 1.71183L4.71963 5.71027L4.72307 5.70715Z"
				fill="black"
				fillOpacity="0.2"
			/>
		</svg>
	),
};

export default function FormComponents() {
	const [showTypeBased, setShowTypeBased] = useState<boolean>(true);
	const [showOptionBased, setShowOptionBased] = useState<boolean>(true);

	const handleDragStart = (e: React.DragEvent<HTMLDivElement>, key: string) => {
		e.dataTransfer.setData('editor/text', `{ "key": "${key}"}`);
	};

	return (
		<div className="_comp">
			<div className="_type_based">
				<div className="_heading" onClick={() => setShowTypeBased(!showTypeBased)}>
					<span>Type based elements</span>
					{showTypeBased ? icon.angleUp : icon.angleDown}
				</div>
				{showTypeBased && (
					<div className="_container">
						{typeBasedComponent.map(each => (
							<div
								className="_item"
								key={each?.label}
								draggable={true}
								onDragStart={e => handleDragStart(e, each?.key)}
							>
								{each?.icon}
								<span>{each?.label}</span>
							</div>
						))}
					</div>
				)}
			</div>
			<div className="_option_based">
				<div className="_heading" onClick={() => setShowOptionBased(!showOptionBased)}>
					<span>Option based elements</span>
					{showOptionBased ? icon.angleUp : icon.angleDown}
				</div>
				{showOptionBased && (
					<div className="_container">
						{optionBasedComponent.map(each => (
							<div
								className="_item"
								key={each?.label}
								draggable={true}
								onDragStart={e => handleDragStart(e, each?.key)}
							>
								{each?.icon}
								<span>{each?.label}</span>
							</div>
						))}
					</div>
				)}
			</div>
		</div>
	);
}
